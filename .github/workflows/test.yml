name: Test Suite

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Python単体テスト
  python-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    services:
      # DynamoDB Local
      dynamodb:
        image: amazon/dynamodb-local:latest
        ports:
          - 8000:8000
        options: >-
          --health-cmd "curl -f http://localhost:8000/shell || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # OpenSearch
      opensearch:
        image: opensearchproject/opensearch:2.11.0
        ports:
          - 9200:9200
        env:
          discovery.type: single-node
          DISABLE_SECURITY_PLUGIN: true
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

      # Redis
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('api/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd api
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock

    - name: Create test tables in DynamoDB Local
      run: |
        cd api
        python -c "
        import boto3
        from api.config import create_test_tables
        
        # DynamoDB Localに接続
        dynamodb = boto3.resource('dynamodb', 
                                  endpoint_url='http://localhost:8000',
                                  region_name='ap-northeast-1',
                                  aws_access_key_id='dummy',
                                  aws_secret_access_key='dummy')
        
        # テスト用テーブルを作成
        create_test_tables(dynamodb)
        print('Test tables created successfully')
        "

    - name: Run unit tests
      env:
        ENVIRONMENT: test
        AWS_DEFAULT_REGION: ap-northeast-1
        AWS_ACCESS_KEY_ID: dummy
        AWS_SECRET_ACCESS_KEY: dummy
        DYNAMODB_ENDPOINT: http://localhost:8000
        OPENSEARCH_ENDPOINT: http://localhost:9200
        REDIS_URL: redis://localhost:6379
        DYNAMODB_REPOS_TABLE: deepwiki-omr-test-repos
        DYNAMODB_PAGES_TABLE: deepwiki-omr-test-pages
        DYNAMODB_JOBS_TABLE: deepwiki-omr-test-jobs
      run: |
        cd api
        pytest test/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./api/coverage.xml
        flags: backend
        name: python-coverage

  # TypeScript/React テスト
  frontend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run TypeScript type check
      run: npm run type-check

    - name: Run ESLint
      run: npm run lint

    - name: Run Jest tests
      run: npm run test:ci

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # E2Eテスト
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [python-tests, frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright
      run: npx playwright install --with-deps

    - name: Start development environment
      run: |
        docker-compose -f docker-compose.dev.yml up -d
        # サービスが起動するまで待機
        sleep 30

    - name: Wait for services to be ready
      run: |
        # API サーバーの起動を待機
        timeout 60 bash -c 'until curl -f http://localhost:8001/health; do sleep 2; done'
        # フロントエンドの起動を待機
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

    - name: Run Playwright tests
      run: npx playwright test

    - name: Upload Playwright report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

    - name: Stop development environment
      if: always()
      run: docker-compose -f docker-compose.dev.yml down

  # パフォーマンステスト
  performance-tests:
    runs-on: ubuntu-latest
    needs: [python-tests, frontend-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Locust
      run: |
        pip install locust

    - name: Start development environment
      run: |
        docker-compose -f docker-compose.dev.yml up -d
        sleep 30

    - name: Wait for API to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8001/health; do sleep 2; done'

    - name: Run performance tests
      run: |
        cd test/performance
        locust --headless --users 10 --spawn-rate 2 --run-time 60s --host http://localhost:8001

    - name: Stop development environment
      if: always()
      run: docker-compose -f docker-compose.dev.yml down

  # セキュリティテスト
  security-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'

    - name: Run Bandit security linter
      run: |
        pip install bandit
        bandit -r api/ -ll

    - name: Run Safety check
      run: |
        pip install safety
        cd api
        safety check -r requirements.txt

    - name: Run npm audit
      run: npm audit --audit-level moderate